%!PS-Adobe-3.0 EPSF-3.0
%%Creator: (GraphicsMagick)
%%Title: (output/30fps/30STD_BAND-0-3.75.eps)
%%CreationDate: (Fri Mar  8 14:28:12 2019)
%%BoundingBox: 0 0 15 15
%%DocumentData: Clean7Bit
%%LanguageLevel: 1
%%Pages: 1
%%EndComments

%%BeginDefaults
%%EndDefaults

%%BeginProlog
%
% Display a color image.  The image is displayed in color on
% Postscript viewers or printers that support color, otherwise
% it is displayed as grayscale.
%
/DirectClassPacket
{
  %
  % Get a DirectClass packet.
  %
  % Parameters:
  %   red.
  %   green.
  %   blue.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile color_packet readhexstring pop pop
  compression 0 eq
  {
    /number_pixels 3 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add 3 mul def
  } ifelse
  0 3 number_pixels 1 sub
  {
    pixels exch color_packet putinterval
  } for
  pixels 0 number_pixels getinterval
} bind def

/DirectClassImage
{
  %
  % Display a DirectClass image.
  %
  systemdict /colorimage known
  {
    columns rows 8
    [
      columns 0 0
      rows neg 0 rows
    ]
    { DirectClassPacket } false 3 colorimage
  }
  {
    %
    % No colorimage operator;  convert to grayscale.
    %
    columns rows 8
    [
      columns 0 0
      rows neg 0 rows
    ]
    { GrayDirectClassPacket } image
  } ifelse
} bind def

/GrayDirectClassPacket
{
  %
  % Get a DirectClass packet;  convert to grayscale.
  %
  % Parameters:
  %   red
  %   green
  %   blue
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile color_packet readhexstring pop pop
  color_packet 0 get 0.299 mul
  color_packet 1 get 0.587 mul add
  color_packet 2 get 0.114 mul add
  cvi
  /gray_packet exch def
  compression 0 eq
  {
    /number_pixels 1 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add def
  } ifelse
  0 1 number_pixels 1 sub
  {
    pixels exch gray_packet put
  } for
  pixels 0 number_pixels getinterval
} bind def

/GrayPseudoClassPacket
{
  %
  % Get a PseudoClass packet;  convert to grayscale.
  %
  % Parameters:
  %   index: index into the colormap.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile byte readhexstring pop 0 get
  /offset exch 3 mul def
  /color_packet colormap offset 3 getinterval def
  color_packet 0 get 0.299 mul
  color_packet 1 get 0.587 mul add
  color_packet 2 get 0.114 mul add
  cvi
  /gray_packet exch def
  compression 0 eq
  {
    /number_pixels 1 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add def
  } ifelse
  0 1 number_pixels 1 sub
  {
    pixels exch gray_packet put
  } for
  pixels 0 number_pixels getinterval
} bind def

/PseudoClassPacket
{
  %
  % Get a PseudoClass packet.
  %
  % Parameters:
  %   index: index into the colormap.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile byte readhexstring pop 0 get
  /offset exch 3 mul def
  /color_packet colormap offset 3 getinterval def
  compression 0 eq
  {
    /number_pixels 3 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add 3 mul def
  } ifelse
  0 3 number_pixels 1 sub
  {
    pixels exch color_packet putinterval
  } for
  pixels 0 number_pixels getinterval
} bind def

/PseudoClassImage
{
  %
  % Display a PseudoClass image.
  %
  % Parameters:
  %   class: 0-PseudoClass or 1-Grayscale.
  %
  currentfile buffer readline pop
  token pop /class exch def pop
  class 0 gt
  {
    currentfile buffer readline pop
    token pop /depth exch def pop
    /grays columns 8 add depth sub depth mul 8 idiv string def
    columns rows depth
    [
      columns 0 0
      rows neg 0 rows
    ]
    { currentfile grays readhexstring pop } image
  }
  {
    %
    % Parameters:
    %   colors: number of colors in the colormap.
    %   colormap: red, green, blue color packets.
    %
    currentfile buffer readline pop
    token pop /colors exch def pop
    /colors colors 3 mul def
    /colormap colors string def
    currentfile colormap readhexstring pop pop
    systemdict /colorimage known
    {
      columns rows 8
      [
        columns 0 0
        rows neg 0 rows
      ]
      { PseudoClassPacket } false 3 colorimage
    }
    {
      %
      % No colorimage operator;  convert to grayscale.
      %
      columns rows 8
      [
        columns 0 0
        rows neg 0 rows
      ]
      { GrayPseudoClassPacket } image
    } ifelse
  } ifelse
} bind def

/DisplayImage
{
  %
  % Display a DirectClass or PseudoClass image.
  %
  % Parameters:
  %   x & y translation.
  %   x & y scale.
  %   label pointsize.
  %   image label.
  %   image columns & rows.
  %   class: 0-DirectClass or 1-PseudoClass.
  %   compression: 0-none or 1-RunlengthEncoded.
  %   hex color packets.
  %
  gsave
  /buffer 512 string def
  /byte 1 string def
  /color_packet 3 string def
  /pixels 768 string def

  currentfile buffer readline pop
  token pop /x exch def
  token pop /y exch def pop
  x y translate
  currentfile buffer readline pop
  token pop /x exch def
  token pop /y exch def pop
  currentfile buffer readline pop
  token pop /pointsize exch def pop
  /Times-Roman findfont pointsize scalefont setfont
  x y scale
  currentfile buffer readline pop
  token pop /columns exch def
  token pop /rows exch def pop
  currentfile buffer readline pop
  token pop /class exch def pop
  currentfile buffer readline pop
  token pop /compression exch def pop
  class 0 gt { PseudoClassImage } { DirectClassImage } ifelse
  grestore
} bind def
%%EndProlog
%%Page:  1 1
%%PageBoundingBox: 0 0 15 15
userdict begin
DisplayImage
0 0
15 15
12.000000
15 15
0
0
00009700009300009300009700009B0000A70000AB0000BF0000C30000B70000C30000C3
0000DF0000D70000EB00009300009F0000AB0000AF0000D70003FF000FFF0003FF001FFF
0000FF0017FF000BFF0043FF001FFF003BFF0000AB0000C30000F3002FFF001BFF001FFF
0017FF0057FF0053FF005BFF008BFF006BFF006BFF004BFF0087FF0000F3001BFF0000FB
003FFF0037FF0037FF0033FF0073FF0067FF00B3FF00C3FF00AFFF3BFFC3006BFF00B3FF
000FFF0023FF0017FF0047FF0053FF006BFF008FFF008BFF00BBFF00D7FF00E3FF1FFFDF
13FFEB00BFFF67FF970000F30007FF0053FF0057FF0087FF0077FF007FFF03FFFB0BFFF3
00C3FF00B7FF00C7FF00BFFF0093FF03FFFB0000EB0000F7004FFF0043FF0077FF0083FF
009BFF0BFFF34BFFB300EFFF33FFCB2FFFCF93FF6B87FF774FFFAF0000E70007FF003FFF
004FFF00B7FF009FFF13FFEB008FFF1FFFDF00E7FF47FFB73BFFC387FF77BFFF3FEBFF13
0000B30000EF002BFF0057FF00ABFF0067FF00BFFF00F7FF00D3FF00E7FF17FFE787FF77
5FFF9F23FFDBA3FF5B0000BB0000BB0000E70013FF0027FF004FFF0053FF00C7FF5FFF9F
00A7FF37FFC737FFC700F7FF8FFF6F43FFBB0000B700009B0000A30000AF0000D70033FF
0047FF00E3FF00A7FF00ABFF00B3FF00CBFF6BFF9377FF8733FFCB00009F0000970000A3
00009B0000A70000CB0000F70007FF006FFF006FFF0083FF00C7FF00EFFF00FBFF00AFFF
00009B00009F0000A30000A70000A30000AF0000D30000C70000CF0000E70003FF0007FF
002FFF0083FF007FFF0000B300009B00009B00009700009B0000CB0000AF0000B70000B7
0000CB0000BB0000C70000DF0000E30000E70000AF00009F0000A30000B70000AF0000BB
0000AB0000AB0000BF0000B30000BF0000C30000D30000C30000CB

end
%%PageTrailer
%%Trailer
%%EOF
